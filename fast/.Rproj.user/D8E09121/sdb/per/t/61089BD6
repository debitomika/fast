{
    "contents" : "output$uiArima_var1 <- renderUI({\n  isTimeSeries <- \"ts\" == getdata_class_ts() | \"mts\" == getdata_class_ts()\n  vars <- varnames_ts()[isTimeSeries]\n  if(length(vars) ==  0) return()\n  selectInput(inputId = \"arima_var1\", label = \"Dependent variable:\", choices = vars,\n              selected = vars[1], multiple = FALSE)\n})\n\n\noutput$autoarima <- renderUI ({\n  sidebarLayout(\n    sidebarPanel(\n      div(class = \"busy\",\n          p(\"Calculation in progress ...\"),\n          img(src=\"ajaxloaderq.gif\")\n      ),\n      wellPanel(\n        HTML(paste(\"<label><strong>Menu:\", \"Forecasting\",\"</strong></label>\")),\n        HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label>\")),\n        HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label>\"))\n      ),\n      wellPanel(\n        uiOutput(\"uiArima_var1\")\n      ),\n      conditionalPanel(\n        condition = \"input.arimatab == 2\",\n        wellPanel(\n          strong(\"Specification\"),br(),br(),\n          conditionalPanel(\n            condition = \"input.subtab == 1 || input.subtab == 2 \",\n            wellPanel(\n              numericInput(inputId = \"lagdat\", label = \"Lags to include\", value = 20, min = 1))),\n          wellPanel(\n            checkboxInput(\n              inputId = \"dfdat\",\n              label = \"Apply Differencing?\",\n              value = FALSE),\n            conditionalPanel(\n              condition = \"input.dfdat == true\",\n              selectInput(\n                inputId = \"dfd\",\n                label = \"\",\n                choices = list(\n                  \"First-Order\" = 1,\n                  \"Second-Order\" = 2),\n                selected = 1))),\n          conditionalPanel(\n            condition = \"input.subtab == 1 || input.subtab == 2 \",\n            wellPanel(\n              sliderInput(inputId = \"confval\", label = \"Confidence Interval (%)\", min = 0, max = 100, value = 95)))\n        )\n      ),\n      conditionalPanel(\n        condition = \"input.arimatab == 3\",\n        \n        wellPanel(\n          selectInput(\n            inputId = \"methods\",\n            label = \"Modelling Method:\",\n            choices = list(\n              \"Automatic Modelling\" = 1,\n              \"Manual Modelling\" =2 ),\n            selected = 1)\n        ),\n        conditionalPanel(\n          condition = \"input.methods == 1\",\n          wellPanel(\n            selectInput(\n              inputId = \"ic\",\n              label = \"Information Criteria\",\n              choices = list(\n                \"aicc\",\n                \"aic\",\n                \"bic\"),\n              selected = \"aicc\"\n            )\n          ), br(), br(), br(), br()\n        ),\n        conditionalPanel(\n          condition = \"input.methods == 2\",\n          wellPanel(\n            numericInput(\n              inputId = \"ar\",\n              label = \"Autoregressive\",\n              min = 0,\n              value = 0),\n            numericInput(\n              inputId = \"df\",\n              label = \"Differencing\",\n              min = 0,\n              value = 0),\n            numericInput(\n              inputId = \"ma\",\n              label = \"Moving Average\",\n              min = 0,\n              value = 0))\n        )\n      ),\n      conditionalPanel(\n        condition = \"input.arimatab == 5 && input.forecasttab == 1\",\n        wellPanel(\n          numericInput(\n            inputId = \"period\",\n            label = \"Number Of Period\",\n            min = 0,\n            value = 10))\n      )\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"arimatab\",\n        tabPanel(\n          title = \"Identification\",\n          #           helpText(\"Identify the model of the simulated data using the correlograms,\n          #                  the\", strong(\"Autocorrelation Function\"), \"(ACF) and the\", \n          #                    strong(\"Partial Autocorrelation Function\"), \"(PACF).\",\n          #                    br(),br()),\n          tabsetPanel(\n            id = \"subtab\",\n            tabPanel(\n              title = \"Historical Plot\",\n              plotOutput(outputId = \"arimaplot\"),\n              helpText(strong(\"Differenced Series Plot\"),br(), \"Apply differencing to see the differenced series plot.\"),\n              plotOutput(\n                outputId = \"h.new\")\n            ),\n            tabPanel(\n              title = \" ACF\",\n              plotOutput(\n                outputId = \"acf\"),\n              verbatimTextOutput(outputId = \"acfval\"),\n              value = 1),\n            tabPanel(\n              title = \"PACF\",\n              plotOutput(\n                outputId = \"pacf\"),\n              verbatimTextOutput(outputId = \"pacfval\"),\n              value = 2)),\n          value = 2),\n        tabPanel(\n          title = \"Estimation\",\n          helpText(\"Estimate the identified model of the data.\", br(), br()),\n          verbatimTextOutput(\n            outputId = \"est\"),\n          value = 3),\n        tabPanel(\n          title = \"Diagnostic\",\n          helpText(\"Diagnose the model by testing the residuals for randomness.\"),\n          br(),br(),\n          withTags(\n            div(\n              class = \"fluid-row\",\n              div(\n                selectInput(\n                  inputId = \"test\",\n                  label = strong(\"PORTMANTEAU TEST\"),\n                  choices = c(\n                    \"Box-Pierce\" = \"Box\",\n                    \"Ljung-Box\" = \"Ljung\"),\n                  selected = \"Ljung\"),\n                br(),br(),\n                helpText(\n                  strong(\"H0:\"),\n                  \"The data are independently distributed (i.e. the correlations in \n                       the population from which the sample is taken are 0, so that any \n                       observed correlations in the data result from randomness of the \n                       sampling process.\",br(),\n                  strong(\"H1:\"),\n                  \"The data are not independently distributed.\",br(),br(),br(),\n                  strong(\"COMPUTATION:\"),br(),\n                  \"The computed statistics is:\",\n                  textOutput(outputId = \"diagx2\"),\n                  \"The computed p-value is:\",\n                  textOutput(outputId = \"diagpv\"),br(),br(),\n                  strong(\"DECISION:\"),textOutput(outputId = \"diagdc\"),br(),br(),\n                  strong(\"CONCLUSION:\"),textOutput(outputId = \"diagcn\")\n                ), class = \"span5\"),\n              div(\n                class = \"span7\",\n                plotOutput(outputId = \"resplot\", height = \"580px\")))),br(),br(),\n          value = 4),\n        tabPanel(\n          title = \"Forecast\",\n          tabsetPanel(\n            id = \"forecasttab\",\n            tabPanel(\n              title = \"Forecastplot\",\n              plotOutput(outputId = \"forecastplot\"),\n              verbatimTextOutput(outputId = \"forecastvalue\"),\n              value = 1),\n            tabPanel(\n              title = \"Fitted plot\",\n              helpText(\"Obtain the predicted values of the model, and plot this with the\n                 original data.\"),\n              plotOutput(outputId = \"fitplot\"),\n              value = 2)),\n          value = 5\n        ),\n        tabPanel(\n          title = \"HandsonTable\",\n          htable(outputId = \"tbl\", clickId = \"tblClick\",colHeaders = \"provided\" ,rowNames = \"enabled\", minCols = 4, minRows = 200, width = 1000, height = 650) #bagian handsonTable\n        )\n      )\n    )\n  )\n})\n\n# conversi data ke ts object dan mengambil variable yang dibutuhkan\ngetdata_ts <- reactive({\n  dat <- ts(getdata())\n  return(dat[,as.character(input$arima_var1)])\n})\n\n######################################################\n## Bagian perhitungan\n######################################################\n\n# handsonTable\nchacedTbl <- NULL\n\noutput$tbl <- renderHtable({\n  if (is.null(input$tbl)){\n  dat <- getdata()\n  dat <- as.data.frame(dat)\n  tbl <- dat\n  chacedTbl <<- tbl\n  print(tbl)\n  return(tbl)\n  } else{\n    chacedTbl <<- input$tbl\n    print(input$tbl)\n    #values[[input$datasets]] <- input$tbl\n    return(input$tbl)\n  }\n})\n\n# plot data awal\noutput$arimaplot <- renderPlot({\n  par(mfcol = c(1,1), mar = c(5,4,1,2))\n  plot(getdata_ts())\n})\n\n# plot acf\noutput$acf <- renderPlot({\n  p <- qacf(getdata_ts(), conf.level = (input$confval/100), max.lag = input$lagdat)\n  if(input$dfdat){\n    d <- diff(getdata_ts(), lag = 1, conf.level = (input$confval/100), differences = as.numeric(input$dfd))\n    p <- qacf(d, max.lag = input$lagdat)\n  }\n  print(p)\n})\n\n# nilai acf\noutput$acfval <- renderPrint({\n  p <- acf(getdata_ts(), lag.max = input$lagdat, conf.level = (input$confval/100),plot = FALSE )\n  if(input$dfdat){\n    d <- diff(getdata_ts(), lag = 1, differences = as.numeric(input$dfd))\n    p <- acf(d, lag.max = input$lagdat, conf.level = (input$confval/100), plot = FALSE)\n  }\n  print(p)\n})\n\n# plot pacf\noutput$pacf <- renderPlot({\n  p <- qpacf(getdata_ts(), conf.level = (input$confval/100), max.lag = input$lagdat)\n  if(input$dfdat){\n    d <- diff(getdata_ts(), lag = 1, conf.level = (input$confval/100), differences = as.numeric(input$dfd))\n    p <- qpacf(d, max.lag = input$lagdat)\n  }\n  print(p)\n})\n\n# nilai pacf\noutput$pacfval <- renderPrint({\n  p <- pacf(getdata_ts(), lag.max = input$lagdat, conf.level = (input$confval/100),plot = FALSE )\n  if(input$dfdat){\n    d <- diff(getdata_ts(), lag = 1, differences = as.numeric(input$dfd))\n    p <- pacf(d, lag.max = input$lagdat, conf.level = (input$confval/100), plot = FALSE)\n  }\n  print(p)\n})\n\n# plot setelah dilakukan differencing\noutput$h.new <- renderPlot({\n  if(input$dfdat){\n    val1 <- diff(getdata_ts(), differences = as.numeric(input$dfd))\n    par(mfcol = c(1,1), mar = c(5,4,1,2))\n    p <- plot(val1)\n    print(p)\n  }\n})\n\n# estimasi menggunakan auto.arima\nestimate.auto <- reactive({\n  if(as.numeric(input$methods) == 1){\n    k <- auto.arima(getdata_ts(), ic = input$ic, stepwise = FALSE)\n  }\n  if(as.numeric(input$methods) == 2){\n    k <- Arima(getdata_ts(), order = c(input$ar, input$df, input$ma), include.drift = TRUE)\n  }\n  return(k)\n})\n\n# menampilkan hasil estimasi\noutput$est <- renderPrint({\n  estimate.auto()\n})\n\n# hasil uji dalam bentuk statistik\noutput$diagx2 <- renderPrint({\n  m <- Box.test(estimate.auto()$residuals, type = input$test)\n  as.numeric(as.matrix(m$statistic))\n})\n\n# hasil uji dalam bentuk p-value\noutput$diagpv <- renderPrint({\n  m <- Box.test(estimate.auto()$residuals, type = input$test)\n  as.numeric(as.matrix(m$p.value))\n})\n\n# keputusan dari uji diagnostic (decision)\noutput$diagdc <- renderPrint({\n  m <- Box.test(estimate.auto()$residuals, type = input$test)\n  j <- as.numeric(as.matrix(m$p.value))\n  if(j >= 0.05){\n    print(\"Do not reject the null hypothesis, since the p-value is greater than 0.05\")\n  }\n  if(j < 0.05){\n    print(\"Reject the null hypothesis, since the p-value is less than 0.05\")\n  }\n})\n\n# kesimpulan dari uji diagnostic (conclusion)\noutput$diagcn <- renderPrint({\n  m <- Box.test(estimate.auto()$residuals, type = input$test)\n  j <- as.numeric(as.matrix(m$p.value))\n  if(j >= 0.05){\n    print(\"Therefore, we do not have enough evidence to reject the null hypothesis. And thus, the residuals of the model exhibits randomness\")\n  }\n  if(j < 0.05){\n    print(\"Therefore, the residuals of the model are not independently distributed.\")\n  }\n})\n\n# plot residual\noutput$resplot <- renderPlot({\n  p <- tsdisplay(estimate.auto()$residuals)\n  print(p)\n})\n\n# output nilai peramalan terhadap fitted value\noutput$fitplot <- renderPlot({\n  fit <- estimate.auto()\n  plot(fit$x,col=\"red\")\n  lines(fitted.Arima(fit),col=\"blue\")\n})\n\n# output plot forecast\noutput$forecastplot <- renderPlot({\n  forecast1 <- forecast.Arima(estimate.auto(), h=input$period)\n  p <- plot.forecast(forecast1)\n  print(p)\n})\n\n# output nilai forecast\noutput$forecastvalue <- renderPrint({\n  forecast1 <- forecast.Arima(estimate.auto(), h=input$period)\n  print(forecast1)\n})\n\n#######################################################\n# fungsi untuk plot acf dan pacf menggunakan ggplot2\n\nqacf <- function(x, conf.level = 0.95, max.lag = NULL,\n                 min.lag = 0) {\n  ciline <- qnorm((1 - conf.level)/2)/sqrt(length(x))\n  bacf <- acf(x, plot = FALSE, lag.max = max.lag)\n  bacfdf <- with(bacf, data.frame(lag, acf))\n  if (min.lag > 0) {\n    bacfdf <- bacfdf[-seq(1, min.lag), ]\n  }\n  significant <- (abs(bacfdf[, 2]) > abs(ciline))^2\n  bacfdf <- cbind(bacfdf, significant)\n  q <- qplot(\n    lag, acf, data = bacfdf, geom = \"bar\",\n    stat = \"identity\", position = \"identity\",\n    ylab = \"Autocorrelation\",\n    fill = factor(significant))\n  q <- q + geom_hline(\n    yintercept = -ciline,\n    color = \"blue\", size = 0.2, linetype=\"dashed\")\n  q <- q + geom_hline(\n    yintercept = ciline,\n    color = \"blue\", size = 0.2, linetype=\"dashed\")\n  q <- q + geom_hline(\n    yintercept = 0, color = \"red\",\n    size = 0.3)\n  q <- q + scale_fill_hue(\n    name = paste(\"Significant at the\", conf.level, \"level\"),\n    breaks = 0:1,\n    labels = c(\"Not Significant\", \"Significant\")) +\n    theme(panel.background = element_rect(\n      size = 3, \n      colour = \"black\",\n      fill = \"white\"),\n      axis.ticks = element_line(\n        size = 2),\n      axis.title.x = element_text(\n        size = rel(1.2), \n        face = \"bold\"),\n      axis.title.y = element_text(\n        size = rel(1.2), \n        face = \"bold\"),\n      plot.title = element_text(\n        size = 20,\n        face = \"bold\", \n        vjust = 1.5),\n      legend.position = \"bottom\",\n      legend.title = element_text(\n        size=rel(1.2), \n        face=\"bold\"),\n      legend.text = element_text(\n        colour=\"blue\", \n        size = 13))\n  return(q)\n}\n\nqpacf <- function(x, conf.level = 0.95, max.lag = NULL,\n                  min.lag = 0) {\n  ciline <- qnorm((1 - conf.level)/2)/sqrt(length(x))\n  bacf <- pacf(x, plot = FALSE, lag.max = max.lag)\n  bacfdf <- with(bacf, data.frame(lag, acf))\n  if (min.lag > 0) {\n    bacfdf <- bacfdf[-seq(1, min.lag), ]\n  }\n  significant <- (abs(bacfdf[, 2]) > abs(ciline))^2\n  bacfdf <- cbind(bacfdf, significant)\n  q <- qplot(\n    lag, acf, data = bacfdf, geom = \"bar\",\n    stat = \"identity\", position = \"identity\",\n    ylab = \"Autocorrelation\",\n    fill = factor(significant))\n  q <- q + geom_hline(\n    yintercept = -ciline,\n    color = \"blue\", size = 0.2, linetype=\"dashed\")\n  q <- q + geom_hline(\n    yintercept = ciline,\n    color = \"blue\", size = 0.2, linetype=\"dashed\")\n  q <- q + geom_hline(\n    yintercept = 0, color = \"red\",\n    size = 0.3)\n  q <- q + scale_fill_hue(\n    name = paste(\"Significant at the\", conf.level, \"level\"), \n    breaks = 0:1, labels = c(\"Not Significant\", \"Significant\")) +\n    theme(panel.background = element_rect(\n      size = 3, \n      colour = \"black\",\n      fill = \"white\"),\n      axis.ticks = element_line(\n        size = 2),\n      axis.title.x = element_text(\n        size = rel(1.2), \n        face = \"bold\"),\n      axis.title.y = element_text(\n        size = rel(1.2), \n        face = \"bold\"),\n      plot.title = element_text(\n        size = 20,\n        face = \"bold\", \n        vjust = 1.5),\n      legend.position = \"bottom\",\n      legend.title = element_text(\n        size=rel(1.2), \n        face=\"bold\"),\n      legend.text = element_text(\n        colour=\"blue\", \n        size = 13))\n  return(q)\n}",
    "created" : 1404048732244.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2799203055",
    "id" : "61089BD6",
    "lastKnownWriteTime" : 1404053649,
    "path" : "~/R/shiny/fast/tools/analysis/autoarima.R",
    "project_path" : "tools/analysis/autoarima.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}