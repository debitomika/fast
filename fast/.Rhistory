a$Pr
a$Pr(>F)
class(a)
str()
str
result1 <- aov(weight~feed, data=chickwts)
summary(result1)
str(result1)
result1$rank
result1$residuals
result1 <- aov(weight~feed, data=chickwts)
data(state)
state
state
head(state.x77)
cor(state.x77[,1:2])
cor(state.x77[,1], state.x77[,2])
?~
getAnywhere("diff")
getAnywhere(diff)
?doff
?diff
diff
getAnywhere(diff)
UseMethod(diff)
UseMethod(diff())
getAnywhere("diff")
car
data(car)
car$speed
cars
dataset()
datasets()
data()
AirPassengers
BOD
EuStockMarkets
ieia
iris
chickwts
volcano
swiss
?R.utils::sourceDirectory
pchisq(0.95, 1)
pchisq(0.05, 1)
pchisq(0.05, 1, lower.tail= FALSE)
pchisq(0.95, 1, lower.tail= FALSE)
qchisq(0,05, 1)
qchisq(0.05, 1)
qchisq(0.95, 1)
pchisq(3.841459, 1)
pchisq(84.26241134751773049645390070922, 1)
pchisq(84.26241134751773049645390070922 , 1)
pchisq(119.136 , 1)
pchisq(119.136 , 1, lower.tail= FALSE)
read.csv(file.choose(), header = TRUE)
data <- read.csv(file.choose(), header = TRUE)
data
mcnemar.test(data)
mcnemar.test(as.matrix(data)
)
as.matrix(data)
data <- read.csv(file.choose(), header = FALSE)
data
data <- read.csv(file.choose(), header = TRUE)
data
as.matrix.data.frame(data)
mcnemar.test(as.matrix(data))
data <- matrix(c(100,333,192,121,101,220,355,254,160,123,153,86,131,333,195,112,99,215,355,311,165,123,169,99), ncol = 2)
data
mcnemar.test(data)
data <- matrix(c(125,0,0,16))
data
data <- matrix(c(125,0,0,16), ncol=2)
data
mcnemar.test(data)
qchisq(0.99, 3)
qchisq(0.95, 3)
matriks1 <- matrix(c(25,77,44,22), ncol=2, byrow= TRUE)
matriks1
eigen(matriks1)
eigen(matriks1)
data <- matrix(c(1,2,3,4,5,6,7,8,9,10), ncol=2)
data
library(mvoutlier)
chisq.plot(data)
data <- matrix(c(31,42,51,45,77,66,88,33,21,14), ncol=2)
data
chisq.plot(data)
chisq.plot(data)
chisq.test(data)
data <- read.csv(file.choose(), header = FALSE)
data
populasi1 <- data[,1:3]
data
populasi1
chisq.plot(populasi1)
chisq.plot(populasi1)
data <- matrix(3,6,10,5, ncol=2)
data <- matrix(c(3,6,10,5), ncol=2)
data
data <- matrix(c(3,10,6,5), ncol=2)
data
mcnemar.test(data)
qt(0.05, 13)
qt(0.95, 13)
qt(0.0125, 7)
qt(0.0125, 7)
qt(0.05/4, 7)
qf(0.05,2,6)
qf(0.95,2,6)
library(car)
library(MASS
)
data <- rnorm(100)
data
qqnorm(data)
qqline(data)
data <- rnorm(100, 0, 1)
qqnorm(data)
qqline(data, col="green")
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
kingstimeseries <- ts(kings)
kingstimeseries
kingstimeseries <- ts(kings)
kingstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(kingstimeseries)
plot.ts(kingstimeseries)
plot.ts(birthstimeseries)
plot.ts(souvenirtimeseries)
logsouvenirtimeseries <- log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
install.packages("TTR
")
install.packages("TTR")
library(TTR)
kingstimeseriesSMA3 <- SMA(kingstimeseries, n=3)
plot.ts(kingstimeseriesSMA3)
kingstimeseriesSMA8 <- SMA(kingstimeseries, n=8)
plot.ts(kingstimeseriesSMA8)
birthstimeseriescomponents <- decompose(birthstimeseries)
birthstimeseriescomponents$seasonal
plot(birthstimeseriescomponents)
birthstimeseriesseasonallyadjusted <- birthstimeseries - birthstimeseriescomponents$seasonal
plot(birthstimeseriesseasonallyadjusted)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesdiff1 <- diff(skirtsseries, differences=1)
plot.ts(skirtsseriesdiff1)
skirtsseriesdiff2 <- diff(skirtsseries, differences=2)
plot.ts(skirtsseriesdiff2)
install.packages("fUnitRoots")
library(fUnitRoots)
?unitrootTest
unitrootTest(skirtsseriesdiff2)
kingtimeseriesdiff1 <- diff(kingstimeseries, differences=1)
plot.ts(kingtimeseriesdiff1)
unitrootTest(kingtimeseriesdiff1)
unitrootTest(kingtimeseriesdiff1, lags=4)
unitrootTest(kingtimeseriesdiff1, lags=1)
acf(kingtimeseriesdiff1, lag.max=20)             # plot a correlogram
acf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # get the autocorrelation values
pacf(kingtimeseriesdiff1, lag.max=20)             # plot a partial correlogram
pacf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # get the partial autocorrelation values
library(forecast)
install.packages("forecast")
?auto.arima
auto.arima(kings)
volcanodust <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
volcanodustseries <- ts(volcanodust,start=c(1500))
plot.ts(volcanodustseries)
auto.arima(volcanodustseries)
acf(volcanodustseries, lag.max=20)             # plot a correlogram
acf(volcanodustseries, lag.max=20, plot=FALSE) # get the values of the autocorrelations
pacf(volcanodustseries, lag.max=20)
pacf(volcanodustseries, lag.max=20, plot=FALSE)
auto.arima(volcanodustseries, ic="bic")
kingstimeseriesarima <- arima(kingstimeseries, order=c(0,1,1)) # fit an ARIMA(0,1,1) model
kingstimeseriesarima
kingstimeseriesforecasts <- forecast.Arima(kingstimeseriesarima, h=5)
kingstimeseriesforecasts
kingstimeseries
plot.forecast(kingstimeseriesforecasts)
acf(kingstimeseriesforecasts$residuals, lag.max=20)
Box.test(kingstimeseriesforecasts$residuals, lag=20, type="Ljung-Box")
plot.ts(kingstimeseriesforecasts$residuals)            # make time plot of forecast errors
plotForecastErrors(kingstimeseriesforecasts$residuals) # make a histogram
plot(kingstimeseriesforecasts$residuals) # make a histogram
plot(kingstimeseriesforecasts$residuals) # make a histogram
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd   <- sd(forecasterrors)
mymin  <- min(forecasterrors) - mysd*5
mymax  <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
plotForecastErrors(kingstimeseriesforecasts$residuals) # make a histogram
volcanodustseriesarima <- arima(volcanodustseries, order=c(2,0,0))
volcanodustseriesarima
volcanodustseriesforecasts <- forecast.Arima(volcanodustseriesarima, h=31)
volcanodustseriesforecasts <- forecast.Arima(volcanodustseriesarima, h=31)
volcanodustseriesforecasts
plot.forecast(volcanodustseriesforecasts)
acf(volcanodustseriesforecasts$residuals, lag.max=20)
Box.test(volcanodustseriesforecasts$residuals, lag=20, type="Ljung-Box")
plot.ts(volcanodustseriesforecasts$residuals)            # make time plot of forecast errors
plotForecastErrors(volcanodustseriesforecasts$residuals) # make a histogram
library(forecast)
auto.arima
methods(auto.arima)
auto.arima
intsall.packages(forecast)
install.packages(forecast)
install.packages("forecast")
update.packages()
y
library(forecast)
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.1")
library("forecast")
forecast.Arima()
forecast.Arima
?forecast.ar
vi(package = "forecast")
vignette(package = "forecast")
?arima
?auto.arima
?simulate.Arima
?ts
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
plot.ts(y)
auto.arima(y)
fourier <- function(t,terms,period)
{
n <- length(t)
X <- matrix(,nrow=n,ncol=2*terms)
for(i in 1:terms)
{
X[,2*i-1] <- sin(2*pi*i*t/period)
X[,2*i] <- cos(2*pi*i*t/period)
}
colnames(X) <- paste(c("S","C"),rep(1:terms,rep(2,terms)),sep="")
return(X)
}
fit <- Arima(y, order=c(2,0,1), xreg=fourier(1:n,4,m))
plot(forecast(fit, h=2*m, xreg=fourier(n+1:(2*m),4,m)))
plot(forecast(auto.arima(y)))
?kruskal.test
?rep
rep(1:4, 2)
rep(1:4, each=2)
rep(1:4, c(2,2,2,2))
x <- c(4,4,3,4,3,3,3,3,2,3)
y <- c(3,4,2,2,3,4,3,3,2,3)
z <- (3,1,3,2,1,3,4,2,4,1)
z <- c(3,1,3,2,1,3,4,2,4,1)
kruskal.test(list(x, y, z))
summary(kruskal.test(list(x, y, z)))
kruskal.test
getAnywhere(kruskal.test)
Ntingkat2 <- 74
Ntingkat3 <- 102
Ntingkat4 <- 73
hitungSample <- function(N, e){
sample <- N/(1+N*e^2)
sample
}
hitungSample(Ntingkat2, 0.05)
sampel1 <- hitungSample(Ntingkat2, 0.05)
sampel1
alpha <- 0.05
sampel2 <- hitungSample(Ntingkat2, alpha)
sampel3 <- hitungSample(Ntingkat3, alpha)
sampel4 <- hitungSample(Ntingkat4, alpha)
sample2
sampel2
sampel3
sampel4
# hitung sampel pakai rumus slovin
alpha <- 0.1
sampel2 <- hitungSample(Ntingkat2, alpha)
sampel3 <- hitungSample(Ntingkat2, alpha)
sampel2 <- hitungSample(Ntingkat2, alpha)
sampel2 <- hitungSample(Ntingkat2, alpha)
sampel3 <- hitungSample(Ntingkat3, alpha)
sampel4 <- hitungSample(Ntingkat4, alpha)
sampel2
sampel3
sampel4
hitungSample(617, 0.1)
hitungK <- function(N, n){
k <- N/n
k
}
sampel2 <- 43
sampel3 <- 51
sampel4 <- 43
k2 < hitungK(Ntingkat2, sampel2)
sampel2 <- 43
sampel3 <- 51
sampel4 <- 43
k2 <- hitungK(Ntingkat2, sampel2)
k3 <- hitungK(Ntingkat3, sampel3)
k4 <- hitungK(Ntingkat4, sampel4)
k1
k2
k3
k2
k3
k4
data <= read.csv(file.choose(), header = TRUE
)
contoh
data
data <- read.csv(file.choose(), header = TRUE
)
data
acf(data$contoh, lag.max=20)
library(forecast)
tsdisplay(data$contoh)
acf(data$contoh, lag.max=20, plot = false)
acf(data$contoh, lag.max=20, plot = FALSE
)
summary(Box.test(data$contoh, type = "Ljung-Box"))
Box.test(data$contoh, type = "Ljung-Box")
str(Box.test(data$contoh, type = "Ljung-Box"))
Box.test(data$contoh, lag = 20, type = "Ljung-Box")
library(forecast)
library(funitroots)
install.packages("fUnitRoots")
library(fUnitRoots)
library(fpp)
kpss.test(usconsumption[,1])
adf.tes
adf.test(usconsumption[,1])
adf(usconsumption[,1])
adfTest(usconsumption[,1])
adf.test(usconsumption[,1])
adf.test(usconsumption[,1], k = 1)
adfTable
adfTable()
x <- c(1:5)
get(x)
get(names(x))
names(x)
x <- ".regression"
get(x)
get(x)()
setwd("~/R/shiny")
library(shiny)
runApp("fast")
runApp("radiant/marketing")
runApp("fast")
runApp("fast")
runApp("fast")
library(shiny)
runApp("fast")
setwd("~/R/shiny")
file.edit("~/R/shiny/.Rprofile")
library(forecast)
data <- read.csv(file.choose(), header = TRUE)
data
auto.arima(data)
data <- ts(data)
data
auto.arima(data)
data$contoh
data
data$contoh
data
auto.arima(data)
auto.arima(data, ic= "aicc")
auto.arima(data, ic= "aic")
auto.arima(data, ic= "bic")
?forecast
?forecast.Arima
data <- read.csv(file.choose(), header = TRUE)
data <- ts(data)
auto.arima(data, seasonal = FALSE, ic = "aic")
auto.arima(data, seasonal = FALSE, ic = "aicc")
auto.arima(data, seasonal = FALSE, ic = "bic")
Arima(data , order = c(1,1,1))
arima(data, order = c(1,1,0))
arima(data, order = c(1,1,1))
arima(data, order = c(3,1,0))
auto.arima(data, seasonal = , allowdrift = FALSE)
auto.arima(data, seasonal = , allowdrift = FALSE, test= "adf")
auto.arima(data, seasonal = , allowdrift = FALSE, test= "kpss")
auto.arima(data, seasonal = , allowdrift = FALSE, test= "pp")
arima(data, order = c(2,2,0))
arima(data, order = c(3,1,0))
auto.arima(data, seasonal = FALSE, allowdrift = FALSE, test= "kpss", ic = "bic")
auto.arima(data, seasonal = FALSE, allowdrift = FALSE, test= "adf", ic = "aic")
auto.arima(data, seasonal = FALSE, allowdrift = FALSE, test= "adf", ic = "bic")
auto.arima(data, seasonal = FALSE, test= "adf", ic = "bic")
acf(data)
auto.arima(data, seasonal = FALSE, test= "adf", ic = "bic")
auto.arima(data)
runApp("radiant/marketing")
install.packages("Rserve")
library(Rserve)
Rserve()
?dev.off
?png
getwd()
plot(rnorm(10))
hist(rnorm(10))
library(Rserve)
Rserve()
Rserve()
png(file = "test1.png")
hist(rnorm(10))
dev.off()
Rserve()
?unlink
r
unlink();r
rnorm(10);r
print(hist(rnorm(10)))
hist(rnorm(10))
getwd()
r = readBin('test.png','raw')
r
r
Rserve()
?kruskal.test
x <- c(4,4,3,4,3,3,3,3,2,3)
y <- c(3,4,2,2,3,4,3,3,2,3)
z <- c(3,1,3,2,1,3,4,2,4,1)
kruskal.test(list(x,y,z))
getAnywhere(kruskal.test)
methods(kruskal.test)
getAnywhere(kruskal.test.default)
rank(x)
rank
g <- factor(rep(1:3, c(10, 10, 10)),
labels = c("pagi",
"siang",
"malam"))
m <- c(x,y,z)
kruskal.test(m, g)
kruskal.test(list(x,y,z))
kruskal.test(list(x,y,z))$STATISTIC
str(kruskal.test(list(x,y,z)))
kruskal.test(list(x,y,z))$statistic
data
as.data.frame(data)
class(data)
data$contoh
data[,1]
str(data)
apa <- data.frame(c(1:5), c(6:10))
apa
str(apa)
length(apa)
nrow(apa)
x <- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects
y <- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease
z <- c(2.8, 3.4, 3.7, 2.2, 2.0) # with asbestosis
?list
l <- list()
l[[1]] <- x
l[[2]] <- 3
l[[2]] <- y
l[[3]] <- z
kruskal.test(l)
kruskal.test(l)$statistic
str(kruskal.test(l))
qchisq(0.95, 2)
kruskal.test(l)$df
kruskal.test(l)$parameter
data <- read.csv(file.choose(), header = TRUE)
data
library(forecast)
auto.arima(data)
auto.arima(data, stepwise = FALSE)
str(auto.arima(data, stepwise = FALSE))
setwd("~/R/shiny")
runApp("fast")
setwd("~/R/shiny")
runApp("fast")
runApp("fast")
setwd("~/R/shiny")
runApp("fast")
setwd("~/R/shiny")
runApp("fast")
setwd("~/R/shiny")
runApp("fast")
