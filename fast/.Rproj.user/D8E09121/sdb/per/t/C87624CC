{
    "contents" : "# only write if running on developer computer\nif(file.exists(\"/Users/vnijs/Dropbox/GitHub/radiant\")) {\n  # list of all radiant files with time-stamps\n  # dbox_remote <- file.info(list.files(recursive = TRUE, include.dirs = TRUE))\n  # save(dbox_remote, file = \"dbox_remote.rda\")\n  # options(shiny.reactlog=TRUE)\n  # options(error = recover)\n  # shiny.trace shows JSON packets transferred over websockets\n  options(shiny.trace = TRUE)\n  vimKeyBinding <- TRUE\n} else {\n  vimKeyBinding <- FALSE\n}\n\ntestingFast <- FALSE\noptions(digits = 3)\n\n# allowing anyfile size when run locally  \nif(Sys.getenv('SHINY_PORT') == \"\") {\n  # no limit to filesize locally\n  options(shiny.maxRequestSize=-1)\n  running_local <<- TRUE\n} else {\n  running_local <<- FALSE\n}\n\n# setInitValues <- function() {\n#   # initialize state list and reactive values\n#   if(testingFast) {\n#     # load previous state for testing\n#     \n#   } else {\n#     \n#     state_list <<- list()\n#     values <<- reactiveValues()\n#     \n#     # initial plot height and width\n#     values$plotHeight <- 650\n#     values$plotWidth <- 650\n#     \n#     # Datasets can change over time (i.e. the changedata function). Therefore,\n#     # the data need to be a reactive value so the other reactive functions\n#     # and outputs that depend on these datasets will know when they are changed.\n#     # robj <- load(\"../base/data/data_init/diamonds.rda\") \n#     robj <- load(\"data/data_init/diamonds.rda\") \n#     df <- get(robj)\n#     values[[\"diamonds\"]] <- df\n#     values[[\"diamonds_descr\"]] <- attr(df,'description')\n#     values$datasetlist <- c(\"diamonds\")\n#   }\n# }\n# \n# setInitValues()   # using a function here so it can also be called from state.R to reset the app\n\n\n# main install happens through update.R \n# options(repos = c(CRAN = \"http://cran.rstudio.com\"))\n# libs <- c(\"shiny\", \"knitr\", \"shinyAce\", \"car\", \"tools\", \"gridExtra\", \"markdown\", \"R.utils\", \"psych\", \n#   \"arm\", \"plyr\", \"reshape2\", \"vegan\", \"ggplot2\", \"lubridate\", \"wordcloud\", \"AlgDesign\")\n\nlibs <- c(\"shiny\", \"knitr\", \"R.utils\", \"markdown\", \"shinyAce\", \"car\", \"MASS\", \"gridExtra\", \"psych\", \n          \"plyr\", \"dplyr\",\"reshape2\", \"vegan\", \"lubridate\", \"wordcloud\", \"AlgDesign\", \"ggplot2\", \"forecast\")\n\n# would prefer to use importFrom but ...\n# detach(\"package:R.utils\", unload=TRUE)\n\n# problem with ggplot2::fortify\n\n# pander for pretty printing of data and analysis output\n# panderOptions('digits',3)\n\n\n\n\n\n\n\n# check if all packages in libs are available\navailable <- suppressWarnings(sapply(libs, require, character.only=TRUE))\ninst.libs <- libs[available == FALSE]\nif(length(inst.libs) != 0) {\n  install.packages(inst.libs, dependencies = TRUE)\n  suppressWarnings(sapply(inst.libs, require, character.only=TRUE))\n}\n\n# binding for a text input that updates when the return key is pressed\nreturnTextInput <- function(inputId, label, value = \"\") {\n  tagList(\n    singleton(tags$head(tags$script(src = \"js/returnTextInputBinding.js\"))),\n    tags$label(label, `for` = inputId),\n    tags$input(id = inputId, type = \"text\", value = value, class = \"returnTextInput\")\n  )\n}\n\n# binding for a sortable list of variables or factor levels\nhtml_list <- function(vars, id) {\n  hl <- paste0(\"<ul id=\\'\",id,\"\\' class='stab'>\")\n  for(i in vars) hl <- paste0(hl, \"<li class='ui-state-default stab'><span class='label'>\",i,\"</span></li>\")\n  paste0(hl, \"</ul>\")\n}\n\n# binding for a sortable list of variables or factor levels\nreturnOrder <- function(inputId, vars) {\n  tagList(\n    singleton(tags$head(tags$script(src = 'js/sort.js'))),\n    singleton(includeCSS(\"www/sort.css\")),\n    HTML(html_list(vars, inputId)),\n    tags$script(paste0(\"$(function() {$( '#\",inputId,\"' ).sortable({placeholder: 'ui-state-highlight'}); $( '#\",inputId,\"' ).disableSelection(); });\"))\n  )\n}\n\n# function to render .Rmd files to html on-the-fly\nincludeRmd <- function(path){\n  # shiny:::dependsOnFile(path)\n  contents <- paste(readLines(path, warn = FALSE), collapse = '\\n')\n  # do not embed image or add css\n  html <- knit2html(text = contents, fragment.only = TRUE, options = \"\", stylesheet = \"www/empty.css\")\n  Encoding(html) <- 'UTF-8'\n  HTML(html)\n}\n\n# binding to a bootstrap popover, function by Joe Cheng https://gist.github.com/jcheng5/5913297\nhelpPopup <- function(title, content, placement=c('right', 'top', 'left', 'bottom'), \n                      trigger=c('click', 'hover', 'focus', 'manual')) {\n  \n  tagList(\n    singleton(tags$head(tags$script(\"$(function() { $(\\\"[data-toggle='popover']\\\").popover(); })\"))),\n    tags$a(href = \"#\", `data-toggle` = \"popover\", title = title, `data-content` = content,\n           `data-placement` = match.arg(placement, several.ok=TRUE)[1], \n           `data-trigger` = match.arg(trigger, several.ok=TRUE)[1], tags$i(class=\"icon-question-sign\"))\n  )\n}\n\n# adding the figures path to avoid making a copy of all figures in www/figures\naddResourcePath(\"figures\", \"tools/help/figures/\")\n# addResourcePath(\"www\", \"../base/www/\")\n# addResourcePath(\"tools\", \"../base/tools/\")\n\n# binding to a bootstrap modal\nhelpModal <- function(title, link, content) {\n  html <- sprintf(\"<div id='%s' class='modal hide fade in' style='display: none; '>\n                  <div class='modal-header'><a class='close' data-dismiss='modal' href='#'>&times;</a>\n                  <h3>%s</h3>\n                  </div>\n                  <div class='modal-body'>%s</div>\n                  </div>\n                  <a title='Help' data-toggle='modal' href='#%s' class='icon-question-sign'></a>\", link, title, content, link)\n  Encoding(html) <- 'UTF-8'\n  HTML(html)\n}\n\nhelpAndReport <- function(title, link, content) {\n  html <- sprintf(\"<div id='%sHelp' class='modal hide fade in' style='display: none; '>\n                  <div class='modal-header'><a class='close' data-dismiss='modal' href='#'>&times;</a>\n                  <h3>%s</h3>\n                  </div>\n                  <div class='modal-body'>%s</div>\n                  </div>\n                  <div>\n                  <a title='Help' data-toggle='modal' href='#%sHelp' class='icon-question-sign alignleft'></a>\n                  <a title='Report results' class='icon-book action-button shiny-bound-input alignright' href='#%sReport' id='%sReport'></a>\n                  </div> \n                  <div style='clear: both;'></div>\n                  \", link, title, content, link, link, link)\n  Encoding(html) <- 'UTF-8'\n  HTML(html)\n}\n\ninclMD <- function(file) return(markdownToHTML(file, options = c(\"\"), stylesheet=\"www/empty.css\"))\n# inclMD <- function(file) return(includeHTML(file))\n",
    "created" : 1403362834521.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1666650364",
    "id" : "C87624CC",
    "lastKnownWriteTime" : 1403365059,
    "path" : "~/R/shiny/fast/global.R",
    "project_path" : "global.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}